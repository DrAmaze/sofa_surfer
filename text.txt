in model

def self.top_five_results(query_param)
  param = '%' + query_param.downcase + '%'
  Spot.where('lower(neighborhood) LIKE ?', param).limit(5)
end

## put this in the other models tooooooooo boo

in controller

(create a new controller)

def index
  @neighborhood = Location.top_five_results(search_params[:query])
  #other
  # other
  render :index
end

def search_params
  params.require(:search).permit(:query, :neighborhood,)
end

in index view (json.jbuilder)

@locations.each do |spot|
  json.set! spot.id :type, 'location'                   {not mandatory}
  json.partial! 'api/locations/location', location:
end

x3333

in routes (optional)

resources :location_searches only: [:index] do
  get "host_by_location", on: :collection
end

in api_util

export const searchLocationDB = query => ({
  $.ajax({
  method: 'GET',
  url: `api/location_searches`,
  data: { search: { query }}
  })
})

continue redux cycle

action:
const receiveSearchResults = searchResults => ({
  type: RECEIVE_SEARCH_RESULTS,
  searchResults
})

export const searchDatabase = query => dispatch => (
  searchLocationDB(query).then(
    results => dispatch(receiveSearchResults(results))
  )
)

reducer:
export const SearchReducer = (state = {}, action) => {
  Object.freeze(state);
  switch(action.type) {
    case RECEIVE_SEARCH_RESULTS:
      return action.searchResults;
    default:
      return state;
  }
}

entities reducer:
add searchReducer

container:
const mapStateToProps = state => ({
currentUser: ________

})

component:
the bar is an input
store handleChange in state

<input onChange={this.handleChange} type='text'
  placeholder=''
  value={this.state.searchVal} />

<SearchIndex firstTime={this.state.firstTime}
    searchItems=
